var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁: 請填入目前網站所在的 URL,  https://mde.tw/cmsimde_site \n 網誌: 請填入目前網站所在的 URL/blog,  https://mde.tw/cmsimde_site/blog \n 簡報: 請填入目前網站所在的 URL/reveal,  https://mde.tw/cmsimde_site/reveal \n 倉儲: 請填入目前網站所對應的 Github 倉儲連結 \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n', 'tags': '', 'url': 'About.html'}, {'title': 'WCM課程期中整理', 'text': '', 'tags': '', 'url': 'WCM課程期中整理.html'}, {'title': '網頁式內容管理', 'text': '如何建立 Github 上的網站? \n \n \n 建立GitHub倉庫： 首先，在GitHub上建立一個新的倉庫（Repository），命名為 username.github.io ，其中 username 是你的GitHub使用者名稱。這個特定命名的倉庫將會成為你的GitHub Pages網站的主頁。 \n \n \n 上傳網站檔案： 將你的網站檔案上傳到這個新建立的倉庫。你可以上傳HTML、CSS、JavaScript和其他靜態檔案。確保主頁檔案的命名是 index.html ，這樣GitHub Pages就能夠自動辨識它作為網站的入口頁面。 \n \n \n 造訪你的網站： 在倉庫的設定頁面中，找到GitHub Pages選項，在「Source」下選擇你的主分支（通常是 master 或 main ），儲存設定。稍等片刻，你的網站就會在 https://username.github.io （其中 username 是你的GitHub用戶名）上訪問。 \n \n \n  Github如何管理內容?\xa0 \n \n \n 版本控制：  GitHub基於Git版本控制系統，透過追蹤檔案的修改、新增和刪除等操作，幫助使用者管理專案的歷史變更記錄。使用者可以使用Git指令或GitHub網站介面提交（commit）修改，然後將其推送（push）到GitHub倉庫。 \n \n \n 分支管理： 使用者可以在GitHub上建立和管理多個分支（Branch），每個分支都是程式碼庫的獨立副本。分支可以用於並行開發不同的功能或修復不同的bug，最終將分支合併（merge）到主分支（如 master 或 main ）。 \n \n \n 問題追蹤：  GitHub提供了Issues功能，用於追蹤專案中的問題、建議或任務。使用者可以建立新的Issue，並在其中描述問題、指派負責人、設定標籤等。其他團隊成員可以對Issue進行評論、討論，以協作解決問題。 \n \n \n 專案管理：  GitHub的Projects功能可讓使用者建立專案板（Project board），將Issue和Pull Request（PR）組織到不同的欄位中，以便追蹤任務的進度和狀態。使用者可以使用專案板進行任務分配、進度追蹤和團隊協作。 \n \n \n 程式碼審查：  GitHub上的Pull Request功能允許開發人員將自己的程式碼變更提交到主程式碼庫，並請求其他團隊成員進行審查。審查者可以查看程式碼變更、提出評論和建議，最終將其批准並合併到主分支中。 \n \n \n 文件編寫：  GitHub可以用於編寫和託管文檔，使用者可以使用Markdown語法編寫文檔，並將其保存在GitHub倉庫中。 GitHub還提供了Wiki功能，可更方便地組織和瀏覽文件。 \n \n \n  Github如何建立網頁系統中的網誌?\xa0 \n \n \n 建立存儲庫 : 在GitHub上建立一個新的存儲庫，命名它為你的網誌。你可以使用個人或組織的存儲庫。 \n \n \n 選擇主題 : 如果你想要快速建立一個網誌，你可以使用GitHub提供的一個預設主題。在存儲庫的設置中，找到GitHub Pages部分，選擇一個主題。 \n \n \n 創建網誌內容 : 使用Markdown格式撰寫你的網誌文章。你可以在存儲庫中創建一個名為 _posts 的目錄，並在其中創建Markdown文件，每個文件代表一篇網誌文章。 \n \n \n 設置頁面 : 在存儲庫的根目錄下，創建一個名為 index.md 的Markdown文件，這將是你的網誌的主頁。你可以在這個文件中添加一些簡介性的內容，以及鏈接到最新的幾篇網誌文章。 \n \n \n 發布網誌 : 當你完成了網誌文章的編寫和設置後，將它們推送到GitHub存儲庫。GitHub Pages將自動將這些Markdown文件轉換為靜態網頁，並在你的GitHub Pages網址上顯示。 \n \n \n', 'tags': '', 'url': '網頁式內容管理.html'}, {'title': 'AI工具', 'text': 'ChatGPT和Gemini Pro 這兩個工具可以協助我們解決什麼問題? \n ChatGPT: 1. 簡單易用：ChatGPT 的界面簡單易用。 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 2. 開源：開發人員可以自由修改和使用代碼。 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa03. 社區活躍：用戶可以獲得大量的幫助和支持。 \n Gemini Pro: 多模態能力(處理多種格式數據) ，強大性能， 容易使用 \n 為什麼有這些工具? \n 有太多繁雜重複性的工作，人類覺得需要找方法解決。 \n 有人卻覺得還好而已, 並無法從中挖出甚麼資料? \n 有人覺得天馬行空，有人問題沒有問對。 \n', 'tags': '', 'url': 'AI工具.html'}, {'title': '網頁上的 IDE', 'text': 'IDE 是甚麼? \n \n \n \n \n 協助程式設計師高效地開發軟體程式碼。 \n \n \n \n \n 可以將 Replit、Codespaces 與 Gitpod 當成 IDE 用來開發各種程式嗎? \n 可以 \n 學會網頁上的各種 IDE 之後, 有沒有甚麼感想或心得? \n 能更便捷的處理一些東西，讓他們變成自動化的模式。 \n', 'tags': '', 'url': '網頁上的 IDE.html'}, {'title': 'Python 程式系統', 'text': '舊 Python 建立新的可攜環境? \n 使用\xa0 virtualenv \xa0來創建虛擬環境。 \n 在網頁中置入 Python 語法的程式加上對 Javascript 與超文件語法的了解後, 能夠應用在那些領域? \n \n \n \n \n \n \n \n \n 網頁開發、數據處理、應用程序開發。 \n \n \n \n \n \n \n \n \n (精密)機械設計流程? \n 需求分析，概念設計，詳細設計，分析和驗證，原型製作，測試和驗證，生產準備，生產和專案交付，售後服務。 \n', 'tags': '', 'url': 'Python 程式系統.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Codespaces', 'text': 'http://41223120.github.io/wcm2024 \xa0 \n', 'tags': '', 'url': 'Codespaces.html'}, {'title': '作業', 'text': '', 'tags': '', 'url': '作業.html'}, {'title': 'w2', 'text': '1.確認所有學員已經建立帳號: 帶有以 Python 編寫的動態網站程式, 以及位於 content 目錄中的靜態網頁資料. \n 2. 確認學員會用replit維護網站:Replit 檢視動態網站或網誌推送到 Github 之前的內容, 必須要在動態與靜態模式中擇一使用 \n 3.如何利用Codespaces維護網站:Codespaces 中維護 wcm2024 的過程幾乎如同在 localhost Windows 10 或 11 的操作系統環境中進行 \n', 'tags': '', 'url': 'w2.html'}, {'title': 'w3', 'text': '\n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w3.html'}, {'title': '常用的git指令:', 'text': 'git 的新增、提交與推送指令: \n git add . git commit -m "說明字串" git push \n 使用 git add . 表示要認列所進行的全部改版內容, git commit -m 執行之前, 若在近端使用, 必須先行設定 git config, 將 home_ipv6 目錄下的 .gitconfig 中明確列出改版者的身分, 其中包括: \n git config --global user.name "提交者的 github 帳號名稱" \n git config --global user.email "提交者在 github 所登錄的 email address" \n 使用可以利用 git version 查詢目前所使用的 git 版本. \n git status 通常用來查核目前近端的改版狀況, 例如: 是否與遠端倉儲同步, 或者遠端倉儲已經有了新版本. \n 若遠端倉儲已經有新的版本, 則在 git push 之前, 必須設法取下遠端資料進行合併後, 才能再提交新的版本並推送到遠端. \n git pull = git fetch + git merge \n git submodule add 倉儲網址 子目錄 \n git clone 倉儲網址_協定.git 指定目錄與否 \n 若要取下帶有子模組的倉儲, 且可能該子模組還有設定其他子模組, 則必須要加上 --recurse-submodules: \n git clone --recurse-submodules 倉儲網址_協定.git 指定目錄與否 \n', 'tags': '', 'url': '常用的git指令:.html'}, {'title': 'W4', 'text': '有關建立網站: 網站指的是 Web site針對網頁瀏覽器檢視的內容加以管理，利用 Github 所提供的 Pages 功能來建立網頁進行管理。 \n Replit靜態網站檢視:若要執行動態網站，可以在 Shell 執行 python3 main.py 或者使用 Replit 的 Run 按鍵，\xa0Shell 執行 python3 main2.py 就可以執行倉儲內的靜態網站檢視。 \n Replit建立分組倉儲權限: \n 分組網站 import 到 Replit, 必須自行在 /home/runner/.ssh 目錄下建立 id_rsa 與 config (id_rsa.pub 必須登錄到 Github 對應帳號), 其中的 config 內容為: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n \n \n \n Host github.com \n User git \n Hostname github.com \n \n \n \n \n \n \n \n ssh.py 程式內容如下: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n \n \n \n import   os \n if   not   os.path.exists( "/home/runner/.ssh" ):  \n \xa0\xa0\xa0\xa0 os.makedirs( "/home/runner/.ssh" )  \n os.system( "mv ./downloads/id_rsa.txt /home/runner/.ssh/id_rsa" ) \n os.system( "mv ./downloads/config.txt /home/runner/.ssh/config" ) \n os.system( "chmod og-rwx /home/runner/.ssh/id_rsa" ) \n \n \n \n \n \n', 'tags': '', 'url': 'W4.html'}, {'title': 'W5', 'text': '以 iframe 嵌入先前的教學影片做課前預習 \n 1.在Replit 平台上的分組倉儲權限設定 \n 2.Putty Solvespace STL 零件檢視方法 \n 3.大規模人工智慧運算的時代：前景、影響及回應 \n', 'tags': '', 'url': 'W5.html'}, {'title': 'w6', 'text': '1.git 的發展歷史: 世界上最流行的版本控制系统之一。 \n \xa0 \xa0git創作人相關履歷:是一位計算機學者，為現代軟體開發有重要的基礎。 \n \xa0 \xa0一般相同專業人士如何利用git解決內容管理問題?:git可以追蹤檔案變化，可以多人對同一個專案進行工作，允許使用者創建分支，透過提交功能可以記錄每次對檔案的修改，git倉庫可以和遠端伺服器上進行備分，提供PR機制，允許成員對程式碼進行審查。 \n 2.假如要在 Windows 實際 demo git client 與 git server, 該如何進行? \n \xa0選擇Git服務器： \xa0可以選 GitLab、GitHub 。 \n 安裝 Git 伺服器軟體： \xa0 根據您選擇的 Git 伺服器軟體，按照其官方文件或指南進行安裝。這些軟體通常提供 Windows 版本的安裝程式，您可以下載並按照步驟進行安裝。 \n 配置 Git 伺服器： \xa0 安裝完成後，根據您的需求配置 Git 伺服器。 \n 啟動 Git 伺服器服務： \xa0 安裝完成後，啟動 Git 伺服器服務，確保其能夠正常運行。 \n 安裝 Git 客戶端： \xa0 在 Windows 上安裝 Git 客戶端。您可以從 Git 官方網站下載\xa0Git for Windows\xa0 \n 配置 Git 客戶端： \xa0 安裝完成後，在命令行或圖形用戶界面中配置 Git 客戶端的使用者信息，包括使用者名稱和郵箱地址，以便提交程式碼時記錄作者信息。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n Git clone 倉庫： \xa0 使用 Git 客戶端從 Git 伺服器上clone倉庫到本地電腦。您可以使用命令行或圖形用戶界面執行clone操作。例如，在命令行中執行 \xa0 git clone <Git伺服器地址> \xa0 即可將倉庫克隆到本地。 \n \n \n 演示 Git 操作： \n \n \n 添加檔案和提交變更： \xa0 在本地克隆的倉庫中添加檔案、修改檔案，並使用 Git 客戶端提交這些變更到本地倉庫。 \n \n \n 推送變更到 Git 伺服器： \xa0 使用 Git 客戶端將本地倉庫中的變更推送到 Git 伺服器。您可以使用命令行或圖形用戶界面執行推送操作。 \n \n \n 拉取最新變更： \xa0 使用 Git 客戶端從 Git 伺服器中拉取最新的變更到本地倉庫，以確保本地倉庫與伺服器保持同步。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w8', 'text': '1.教育的本質看課程內容: 培養對 學習的渴望 和 對世界的好奇心， 培養對 學習的渴望 和 對世界的好奇心。 \n \n 廣泛的學習經驗：鼓勵學生 探索不同科目和學科的廣泛教育的重要性 。應該 促進智識好奇心 和 批判性思維 。 \n 2.如何將影片嵌入網頁:上傳影片到youtube上，之後到自己的youtube影片下，點 分享 選擇第一個，把右側 超連結程式 碼複製，編輯網站，點Source code ， 把內容複製貼上。 \n \n', 'tags': '', 'url': 'w8.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Brython.html'}]};